package com.kyk.mealtracker.bot;

import com.kyk.mealtracker.entity.BotUser;
import com.kyk.mealtracker.entity.Meal;
import com.kyk.mealtracker.repository.BotUserRepository;
import com.kyk.mealtracker.services.AdminService;
import com.kyk.mealtracker.services.MealService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;

@Component
public class KykMealBot extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(KykMealBot.class);
    private final MealService mealService;
    private final BotUserRepository botUserRepository;
    private final AdminService adminService;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    public KykMealBot(MealService mealService, BotUserRepository botUserRepository, AdminService adminService) {
        this.mealService = mealService;
        this.botUserRepository = botUserRepository;
        this.adminService = adminService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage() || !update.getMessage().hasText()) {
            return;
        }

        String messageText = update.getMessage().getText();
        Long chatId = update.getMessage().getChatId();
        User user = update.getMessage().getFrom();

        try {
            // Her mesajda kullanƒ±cƒ±yƒ± kaydet/g√ºncelle
            saveOrUpdateUser(chatId, user);

            // Admin komutlarƒ± kontrol√º
            if (messageText.startsWith("/admin_")) {
                if (!adminService.isAdmin(chatId)) {
                    sendMessage(chatId, "‚õî Bu komutu kullanma yetkiniz yok!");
                    return;
                }
                handleAdminCommand(chatId, messageText);
                return;
            }

            switch (messageText) {
                case "/start":
                    sendWelcomeMessage(chatId);
                    break;
                case "/bugun":
                    sendTodaysMeals(chatId);
                    break;
                case "/yarin":
                    sendTomorrowsMeals(chatId);
                    break;
                case "/bildirim_ac":
                    enableNotifications(chatId);
                    break;
                case "/bildirim_kapat":
                    disableNotifications(chatId);
                    break;
                case "/yardim":
                    sendHelpMessage(chatId);
                    break;
                case "/stats":
                    if (adminService.isAdmin(chatId)) {
                        sendMessage(chatId, adminService.getBotStats());
                    } else {
                        sendMessage(chatId, "‚õî Bu komutu kullanma yetkiniz yok!");
                    }
                    break;
                default:
                    sendMessage(chatId, "Anla≈üƒ±lamadƒ±. Komutlarƒ± g√∂rmek i√ßin /yardim yazƒ±n.");
            }
        } catch (Exception e) {
            logger.error("Message handling error for chatId: " + chatId, e);
            try {
                sendMessage(chatId, "Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.");
            } catch (TelegramApiException ex) {
                logger.error("Error sending error message", ex);
            }
        }
    }

    private void handleAdminCommand(Long chatId, String command) throws TelegramApiException {
        String[] parts = command.split(" ", 2);
        String cmd = parts[0];

        switch (cmd) {
            case "/admin_list":
                sendMessage(chatId, adminService.getUserList(0));
                break;
            case "/admin_broadcast":
                if (parts.length < 2) {
                    sendMessage(chatId, "L√ºtfen g√∂nderilecek mesajƒ± yazƒ±n.\n√ñrnek: /admin_broadcast Merhaba!");
                    return;
                }
                broadcastMessage(parts[1]);
                sendMessage(chatId, "‚úÖ Mesaj t√ºm kullanƒ±cƒ±lara g√∂nderildi!");
                break;
            case "/admin_stats":
                sendMessage(chatId, adminService.getBotStats());
                break;
            default:
                sendMessage(chatId, "Ge√ßersiz admin komutu!");
        }
    }

    private void broadcastMessage(String message) {
        List<BotUser> allUsers = botUserRepository.findAll();
        for (BotUser user : allUsers) {
            try {
                SendMessage sendMessage = new SendMessage();
                sendMessage.setChatId(user.getChatId());
                sendMessage.setText("üì¢ Y√∂netici Duyurusu:\n\n" + message);
                execute(sendMessage);
                Thread.sleep(50); // Rate limiting i√ßin k√º√ß√ºk bir gecikme
            } catch (Exception e) {
                logger.error("Broadcast message failed for user: " + user.getChatId(), e);
            }
        }
    }

    private void saveOrUpdateUser(Long chatId, User user) {
        BotUser botUser = botUserRepository.findById(chatId).orElse(new BotUser());
        botUser.setChatId(chatId);
        botUser.setUsername(user.getUserName());
        botUser.setFirstName(user.getFirstName());
        botUser.setLastName(user.getLastName());
        botUser.setLastInteractionDate(LocalDateTime.now());
        botUser.setLastActivityDate(LocalDateTime.now());

        // Yeni kullanƒ±cƒ± ise varsayƒ±lan deƒüerleri ayarla
        if (!botUserRepository.existsById(chatId)) {
            botUser.setNotificationsEnabled(true);
            botUser.setIsAdmin(false);  // Varsayƒ±lan olarak admin deƒüil
        }

        botUserRepository.save(botUser);
    }

    private void enableNotifications(Long chatId) throws TelegramApiException {
        BotUser user = botUserRepository.findById(chatId).orElseThrow();
        user.setNotificationsEnabled(true);
        botUserRepository.save(user);
        sendMessage(chatId, "‚úÖ G√ºnl√ºk men√º bildirimleri a√ßƒ±ldƒ±! Her sabah saat 07:00'de men√ºy√º size ileteceƒüim.");
    }

    private void disableNotifications(Long chatId) throws TelegramApiException {
        BotUser user = botUserRepository.findById(chatId).orElseThrow();
        user.setNotificationsEnabled(false);
        botUserRepository.save(user);
        sendMessage(chatId, "‚ùå G√ºnl√ºk men√º bildirimleri kapatƒ±ldƒ±!");
    }

    private void sendWelcomeMessage(Long chatId) throws TelegramApiException {
        String message = """
                üéâ KYK Yemek Botuna Ho≈ü Geldiniz!
                
                Bu bot size g√ºnl√ºk yemek men√ºs√ºn√º g√∂sterir ve hatƒ±rlatƒ±r.
                
                Kullanabileceƒüiniz komutlar:
                /bugun - Bug√ºn√ºn men√ºs√º
                /yarin - Yarƒ±nƒ±n men√ºs√º
                /bildirim_ac - G√ºnl√ºk bildirimleri a√ß
                /bildirim_kapat - G√ºnl√ºk bildirimleri kapat
                /yardim - T√ºm komutlarƒ± g√∂ster
                
                Varsayƒ±lan olarak g√ºnl√ºk bildirimler a√ßƒ±ktƒ±r.
                Her sabah 07:00'de o g√ºn√ºn men√ºs√ºn√º size g√∂ndereceƒüim!
                """;
        sendMessage(chatId, message);
    }

    private void sendTodaysMeals(Long chatId) throws TelegramApiException {
        LocalDate today = LocalDate.now();
        List<Meal> meals = mealService.getMealsByDate(today);
        sendMealMessage(chatId, today, meals);
    }

    private void sendTomorrowsMeals(Long chatId) throws TelegramApiException {
        LocalDate tomorrow = LocalDate.now().plusDays(1);
        List<Meal> meals = mealService.getMealsByDate(tomorrow);
        sendMealMessage(chatId, tomorrow, meals);
    }

    private void sendMealMessage(Long chatId, LocalDate date, List<Meal> meals) throws TelegramApiException {
        if (meals.isEmpty()) {
            sendMessage(chatId, date.format(DateTimeFormatter.ofPattern("dd MMMM yyyy", new Locale("tr"))) +
                    " tarihli men√º hen√ºz yayƒ±nlanmamƒ±≈ü.");
            return;
        }

        StringBuilder messageBuilder = new StringBuilder();
        messageBuilder.append("üìÖ ").append(date.format(DateTimeFormatter.ofPattern("dd MMMM yyyy", new Locale("tr")))).append("\n\n");

        meals.stream()
                .filter(meal -> meal.getMealType() == 0)
                .findFirst()
                .ifPresent(breakfast -> formatMeal(messageBuilder, "üåÖ KAHVALTI", breakfast));

        messageBuilder.append("\n");

        meals.stream()
                .filter(meal -> meal.getMealType() == 1)
                .findFirst()
                .ifPresent(dinner -> formatMeal(messageBuilder, "üåô AK≈ûAM YEMEƒûƒ∞", dinner));

        sendMessage(chatId, messageBuilder.toString());
    }

    private void formatMeal(StringBuilder builder, String title, Meal meal) {
        builder.append(title).append(" (").append(meal.getTotalCalories()).append(" kcal)").append("\n");
        builder.append("‚Ä¢ ").append(meal.getFirst()).append(" (").append(meal.getFirstCalories()).append(" kcal)").append("\n");
        builder.append("‚Ä¢ ").append(meal.getSecond()).append(" (").append(meal.getSecondCalories()).append(" kcal)").append("\n");
        builder.append("‚Ä¢ ").append(meal.getThird()).append(" (").append(meal.getThirdCalories()).append(" kcal)").append("\n");
        builder.append("‚Ä¢ ").append(meal.getFourth()).append(" (").append(meal.getFourthCalories()).append(" kcal)").append("\n");
    }

    private void sendHelpMessage(Long chatId) throws TelegramApiException {
        String helpMessage = """
                üìã Kullanƒ±labilir Komutlar:
                
                /bugun - Bug√ºn√ºn men√ºs√ºn√º g√∂ster
                /yarin - Yarƒ±nƒ±n men√ºs√ºn√º g√∂ster
                /bildirim_ac - G√ºnl√ºk bildirimleri a√ß
                /bildirim_kapat - G√ºnl√ºk bildirimleri kapat
                /yardim - Bu mesajƒ± g√∂ster
                """ + (adminService.isAdmin(chatId) ? """
                
                üîß Admin Komutlarƒ±:
                /stats - Bot istatistiklerini g√∂ster
                /admin_list - Kullanƒ±cƒ±larƒ± listele
                /admin_broadcast - T√ºm kullanƒ±cƒ±lara mesaj g√∂nder
                /admin_stats - Detaylƒ± istatistikler
                """ : "");
        sendMessage(chatId, helpMessage);
    }

    private void sendMessage(Long chatId, String text) throws TelegramApiException {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.enableHtml(true);
        execute(message);
    }
}
